
Generate_Waveforms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000713  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000559  00000000  00000000  000009b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000526  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e8  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000437  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000070  00000000  00000000  00001953  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include "TIMER.h"

int main(void)
{
   TIMER0_CTC_wave_nonpwm();
  6c:	0e 94 3f 00 	call	0x7e	; 0x7e <TIMER0_CTC_wave_nonpwm>
   TIMER1_fast_pwm_8bit_wave();
  70:	0e 94 78 00 	call	0xf0	; 0xf0 <TIMER1_fast_pwm_8bit_wave>
   TIMER2_phase_correct_pwm_wave();
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <TIMER2_phase_correct_pwm_wave>
}
  78:	80 e0       	ldi	r24, 0x00	; 0
  7a:	90 e0       	ldi	r25, 0x00	; 0
  7c:	08 95       	ret

0000007e <TIMER0_CTC_wave_nonpwm>:
	SET_BIT(TCCR2,CS22);
	//set OC2 as output pin to generetion wave
	SET_BIT(DDRD,PD7);
	//clear OC2 on compare match and set OC2 at bottom=0
	CLR_BIT(TCCR0,COM00);
	SET_BIT(TCCR0,COM01);
  7e:	83 b7       	in	r24, 0x33	; 51
  80:	8f 7b       	andi	r24, 0xBF	; 191
  82:	83 bf       	out	0x33, r24	; 51
  84:	83 b7       	in	r24, 0x33	; 51
  86:	88 60       	ori	r24, 0x08	; 8
  88:	83 bf       	out	0x33, r24	; 51
  8a:	80 e5       	ldi	r24, 0x50	; 80
  8c:	8c bf       	out	0x3c, r24	; 60
  8e:	83 b7       	in	r24, 0x33	; 51
  90:	81 60       	ori	r24, 0x01	; 1
  92:	83 bf       	out	0x33, r24	; 51
  94:	83 b7       	in	r24, 0x33	; 51
  96:	8d 7f       	andi	r24, 0xFD	; 253
  98:	83 bf       	out	0x33, r24	; 51
  9a:	83 b7       	in	r24, 0x33	; 51
  9c:	84 60       	ori	r24, 0x04	; 4
  9e:	83 bf       	out	0x33, r24	; 51
  a0:	87 b3       	in	r24, 0x17	; 23
  a2:	88 60       	ori	r24, 0x08	; 8
  a4:	87 bb       	out	0x17, r24	; 23
  a6:	83 b7       	in	r24, 0x33	; 51
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	83 bf       	out	0x33, r24	; 51
  ac:	83 b7       	in	r24, 0x33	; 51
  ae:	8f 7d       	andi	r24, 0xDF	; 223
  b0:	83 bf       	out	0x33, r24	; 51
  b2:	08 95       	ret

000000b4 <TIMER2_phase_correct_pwm_wave>:
}

void TIMER2_phase_correct_pwm_wave(void)
{
	//determine phase correct PWM mode
	SET_BIT(TCCR2,WGM20);
  b4:	85 b5       	in	r24, 0x25	; 37
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	85 bd       	out	0x25, r24	; 37
	CLR_BIT(TCCR2,WGM21);
  ba:	85 b5       	in	r24, 0x25	; 37
  bc:	87 7f       	andi	r24, 0xF7	; 247
  be:	85 bd       	out	0x25, r24	; 37
	//load value in OCR2 ,to compare match
	OCR2=64;
  c0:	80 e4       	ldi	r24, 0x40	; 64
  c2:	83 bd       	out	0x23, r24	; 35
	//determine prescaler=1024, timer2_clock=(cpu_clock/prescaler)
	CLR_BIT(ASSR,AS2);    //not exit external clock
  c4:	82 b5       	in	r24, 0x22	; 34
  c6:	87 7f       	andi	r24, 0xF7	; 247
  c8:	82 bd       	out	0x22, r24	; 34
	SET_BIT(TCCR2,CS20);
  ca:	85 b5       	in	r24, 0x25	; 37
  cc:	81 60       	ori	r24, 0x01	; 1
  ce:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS21);
  d0:	85 b5       	in	r24, 0x25	; 37
  d2:	82 60       	ori	r24, 0x02	; 2
  d4:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
  d6:	85 b5       	in	r24, 0x25	; 37
  d8:	84 60       	ori	r24, 0x04	; 4
  da:	85 bd       	out	0x25, r24	; 37
	//set OC2 as output pin to generetion wave
	SET_BIT(DDRD,PD7);
  dc:	81 b3       	in	r24, 0x11	; 17
  de:	80 68       	ori	r24, 0x80	; 128
  e0:	81 bb       	out	0x11, r24	; 17
	//clear OC2 on compare match when up_counting and set OC2 on compare match when downcounting
	CLR_BIT(TCCR2,COM20);
  e2:	85 b5       	in	r24, 0x25	; 37
  e4:	8f 7e       	andi	r24, 0xEF	; 239
  e6:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,COM21);
  e8:	85 b5       	in	r24, 0x25	; 37
  ea:	80 62       	ori	r24, 0x20	; 32
  ec:	85 bd       	out	0x25, r24	; 37
  ee:	08 95       	ret

000000f0 <TIMER1_fast_pwm_8bit_wave>:
}

void TIMER1_fast_pwm_8bit_wave(void)
{
	//determine fast PWM 8_bit mode
	SET_BIT(TCCR1A,WGM10);
  f0:	8f b5       	in	r24, 0x2f	; 47
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	8f bd       	out	0x2f, r24	; 47
	CLR_BIT(TCCR1A,WGM11);
  f6:	8f b5       	in	r24, 0x2f	; 47
  f8:	8d 7f       	andi	r24, 0xFD	; 253
  fa:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,WGM12);
  fc:	8e b5       	in	r24, 0x2e	; 46
  fe:	88 60       	ori	r24, 0x08	; 8
 100:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,WGM13);
 102:	8e b5       	in	r24, 0x2e	; 46
 104:	8f 7e       	andi	r24, 0xEF	; 239
 106:	8e bd       	out	0x2e, r24	; 46
	//load value in OCR1A and OCR1B ,to compare match
	OCR1A=64;
 108:	80 e4       	ldi	r24, 0x40	; 64
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	9b bd       	out	0x2b, r25	; 43
 10e:	8a bd       	out	0x2a, r24	; 42
	OCR1B=64;
 110:	99 bd       	out	0x29, r25	; 41
 112:	88 bd       	out	0x28, r24	; 40
	//determine prescaler=1024, timer2_clock=(cpu_clock/prescaler)
	SET_BIT(TCCR1B,CS10);
 114:	8e b5       	in	r24, 0x2e	; 46
 116:	81 60       	ori	r24, 0x01	; 1
 118:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,CS11);
 11a:	8e b5       	in	r24, 0x2e	; 46
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,CS12);
 120:	8e b5       	in	r24, 0x2e	; 46
 122:	84 60       	ori	r24, 0x04	; 4
 124:	8e bd       	out	0x2e, r24	; 46
	//set OC1A and OC1B as output pin to generetion wave
	SET_BIT(DDRD,PD5);
 126:	81 b3       	in	r24, 0x11	; 17
 128:	80 62       	ori	r24, 0x20	; 32
 12a:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,PD4);
 12c:	81 b3       	in	r24, 0x11	; 17
 12e:	80 61       	ori	r24, 0x10	; 16
 130:	81 bb       	out	0x11, r24	; 17
	//clear OC1A on compare match and set OC1A at bottom=0
	CLR_BIT(TCCR1A,COM1A0);
 132:	8f b5       	in	r24, 0x2f	; 47
 134:	8f 7b       	andi	r24, 0xBF	; 191
 136:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,COM1A1);
 138:	8f b5       	in	r24, 0x2f	; 47
 13a:	80 68       	ori	r24, 0x80	; 128
 13c:	8f bd       	out	0x2f, r24	; 47
	//set OC1B on compare match and clear OC1B at bottom=0
	SET_BIT(TCCR1A,COM1B0);
 13e:	8f b5       	in	r24, 0x2f	; 47
 140:	80 61       	ori	r24, 0x10	; 16
 142:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,COM1B1);
 144:	8f b5       	in	r24, 0x2f	; 47
 146:	80 62       	ori	r24, 0x20	; 32
 148:	8f bd       	out	0x2f, r24	; 47
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
